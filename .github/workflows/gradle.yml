name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read
  
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: dowajoyak.shop
  CODE_DEPLOY_APPLICATION_NAME: dowajoyak-client-codeDeploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: dowajoyak-client-codeDeploy-group

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./server
        
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Add permission
      run: chmod +x gradlew
      working-directory: ${{ env.working-directory }}
      
    - name: Build with Gradle
      run: ./gradlew clean build
      working-directory: ${{ env.working-directory }}
        
    
    # build한 후 프로젝트를 압축합니다.
    - name: Make zip file
      run: zip -r ./seb-main-project-009.zip .
      shell: bash
    
    # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
    # 아래 코드에 Access Key와 Secret Key를 직접 작성하지 않습니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-region: ap-northeast-2
    
    # 압축한 프로젝트를 S3로 전송합니다.
    - name: Upload to AWS S3
      run: aws s3 cp --region ap-northeast-2 ./seb-main-project-009.zip s3://$S3_BUCKET_NAME/seb-main-project-009.zip
    # CodeDeploy에게 배포 명령을 내립니다.
    - name: Code Deploy
      run: >
        aws deploy create-deployment --application-name $CODE_DEPLOY_APPLICATION_NAME
        --deployment-config-name CodeDeployDefault.AllAtOnce
        --deployment-group-name $CODE_DEPLOY_DEPLOYMENT_GROUP_NAME
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=seb-main-project-009.zip
